<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$id != null &amp;&amp; authorAvatarUrl.isNotEmpty() &amp;&amp; authorHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseName.isNotEmpty() &amp;&amp; latestReleaseTimestamp.isNotEmpty()</ID>
    <ID>ComplexCondition:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$result &gt; 0 &amp;&amp; repositoryOwner.isNotEmpty() &amp;&amp; repositoryName.isNotEmpty() &amp;&amp; authorAvatarUrl.isNotEmpty() &amp;&amp; authorHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseName.isNotEmpty() &amp;&amp; latestReleaseTimestamp.isNotEmpty()</ID>
    <ID>CyclomaticComplexMethod:MainScreen.kt$@Composable fun MainScreen( systemUiController: SystemUiController, mainViewModel: MainViewModel, addGitHubRepositoryViewModel: AddGitHubRepositoryViewModel, onNavigateToSettings: () -&gt; Unit )</ID>
    <ID>LongMethod:AddGitHubRepositoryDialog.kt$@Composable fun AddGitHubRepositoryDialog( viewModel: AddGitHubRepositoryViewModel, onDismiss: () -&gt; Unit, onConfirm: (repositoryOwner: String, repositoryName: String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:GitHubRepositoryItem.kt$@Composable fun GitHubRepositoryItem( modifier: Modifier = Modifier, dismissState: DismissState = rememberDismissState(), gitHubRepository: GitHubRepository = GitHubRepository(), onGitHubUserAvatarSelected: (String) -&gt; Unit = {}, onGitHubRepositoryReleaseSelected: (String) -&gt; Unit = {} )</ID>
    <ID>LongMethod:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$suspend fun getGitHubRepositoriesOrNull( gitHubRepositories: List&lt;GitHubRepository&gt;, accessToken: String ): List&lt;GitHubRepository&gt;?</ID>
    <ID>LongMethod:LoginScreen.kt$@Composable fun LoginScreen( modifier: Modifier = Modifier, signInEnabled: Boolean = false, onLoginRequested: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun BottomBar( isLoading: Boolean, canScrollUp: Boolean, defaultSortOrder: SortOrder, onApplySortOrder: (SortOrder) -&gt; Unit, onRefresh: () -&gt; Unit, onFocusSearch: () -&gt; Unit, onShowSettings: () -&gt; Unit, onAddGitHubRepository: () -&gt; Unit, onScrollToTop: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun MainScreen( modifier: Modifier = Modifier, lazyListState: LazyListState = rememberLazyListState(), snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, gitHubRepositories: LazyPagingItems&lt;GitHubRepository&gt;? = null, defaultSortOrder: SortOrder = SortOrder.Asc.RepositoryOwner, isLoading: Boolean = false, focusRequester: FocusRequester = remember { FocusRequester() }, searchActive: Boolean = false, searchQuery: String = String.Empty, onSearchQueryChange: (String) -&gt; Unit = {}, onSearchRequested: (String) -&gt; Unit = {}, onSearchActiveChange: (Boolean) -&gt; Unit = {}, onAddGitHubRepository: () -&gt; Unit = {}, onApplySortOrder: (SortOrder) -&gt; Unit = {}, onShowSettings: () -&gt; Unit = {}, onScrollToTop: () -&gt; Unit = {}, onUserAvatarSelected: (String) -&gt; Unit = {}, onReleaseSelected: (String) -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onDelete: (GitHubRepository) -&gt; Unit = {} )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun MainScreen( systemUiController: SystemUiController, mainViewModel: MainViewModel, addGitHubRepositoryViewModel: AddGitHubRepositoryViewModel, onNavigateToSettings: () -&gt; Unit )</ID>
    <ID>LongMethod:NavGraph.kt$@Composable fun NavGraph( systemUiController: SystemUiController, navController: NavHostController, startDestination: String = NavDestinations.ROUTE_LOGIN )</ID>
    <ID>LongMethod:SettingsManageItem.kt$@Composable fun SettingsManageItem( modifier: Modifier = Modifier, onGitHubRepositoriesImport: () -&gt; Unit = {}, onGitHubRepositoriesExport: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:SettingsScreen.kt$@Composable fun SettingsScreen( systemUiController: SystemUiController, viewModel: SettingsViewModel, onNavigateToLogin: () -&gt; Unit, onNavigateUp: () -&gt; Unit )</ID>
    <ID>LongMethod:SortOrderDialog.kt$@Composable fun SortOrderDialog( defaultSortOrder: SortOrder, onDismiss: () -&gt; Unit, onConfirm: (SortOrder) -&gt; Unit )</ID>
    <ID>LongParameterList:MainScreen.kt$( isLoading: Boolean, canScrollUp: Boolean, defaultSortOrder: SortOrder, onApplySortOrder: (SortOrder) -&gt; Unit, onRefresh: () -&gt; Unit, onFocusSearch: () -&gt; Unit, onShowSettings: () -&gt; Unit, onAddGitHubRepository: () -&gt; Unit, onScrollToTop: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:SettingsViewModel.kt$SettingsViewModel$( savedStateHandle: SavedStateHandle, private val gitHubAuthenticationRepository: GitHubAuthenticationRepository, private val gitHubReleaseMonitorRepository: GitHubReleaseMonitorRepository, private val gitHubRepositoryJsonRepository: GitHubRepositoryJsonRepository, private val gitHubRepositoryRepository: GitHubRepositoryRepository, private val settingsRepository: SettingsRepository, private val userRepository: UserRepository )</ID>
    <ID>SpreadOperator:GitHubRepositoryReleaseWorker.kt$GitHubRepositoryReleaseWorker$(*results.toTypedArray())</ID>
    <ID>SpreadOperator:MainViewModel.kt$MainViewModel$(*repositories.toTypedArray())</ID>
    <ID>SpreadOperator:SettingsViewModel.kt$SettingsViewModel$(*gitHubRepositories)</ID>
    <ID>TooGenericExceptionCaught:Extensions.kt$exception: Exception</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val MAX_CHAR_OWNER = 39</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val MAX_CHAR_REPO = 100</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val MIME_TYPE_JSON = "application/json"</ID>
    <ID>TopLevelPropertyNaming:Utils.kt$const val TOP_LEVEL_PACKAGE_NAME = "com.tomg.githubreleasemonitor."</ID>
  </CurrentIssues>
</SmellBaseline>
