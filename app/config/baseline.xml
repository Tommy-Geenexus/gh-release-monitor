<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$id != null &amp;&amp; authorAvatarUrl.isNotEmpty() &amp;&amp; authorHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseName.isNotEmpty() &amp;&amp; latestReleaseTimestamp.isNotEmpty()</ID>
    <ID>ComplexCondition:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$result &gt; 0 &amp;&amp; repositoryOwner.isNotEmpty() &amp;&amp; repositoryName.isNotEmpty() &amp;&amp; authorAvatarUrl.isNotEmpty() &amp;&amp; authorHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseName.isNotEmpty() &amp;&amp; latestReleaseTimestamp.isNotEmpty()</ID>
    <ID>ComplexMethod:MainScreen.kt$@Composable fun MainScreen( systemUiController: SystemUiController, mainViewModel: MainViewModel, addRepositoryViewModel: AddRepositoryViewModel, onNavigateToSettings: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AddGitHubRepositoryDialog.kt$@Composable fun AddGitHubRepositoryDialog( viewModel: AddRepositoryViewModel, onDismiss: () -&gt; Unit, onConfirm: (repositoryOwner: String, repositoryName: String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:AddGitHubRepositoryDialog.kt$@Composable fun TextFieldBottomIndicator( helperText: String, errorText: String, modifier: Modifier = Modifier, textColor: Color = MaterialTheme.colorScheme.onSurfaceVariant, errorTextColor: Color = MaterialTheme.colorScheme.error, isError: Boolean = false, charCnt: Int = 0, maxCharCnt: Int = Integer.MAX_VALUE )</ID>
    <ID>FunctionNaming:GitHubReleaseMonitorTheme.kt$@Composable fun GitHubReleaseMonitorTheme( darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:GitHubRepositoryItem.kt$@Composable fun GitHubRepositoryItem( modifier: Modifier = Modifier, swipeableState: SwipeableState&lt;Float&gt; = rememberSwipeableState(initialValue = 0f), gitHubRepository: GitHubRepository = GitHubRepository(), onGitHubUserAvatarSelected: (String) -&gt; Unit = {}, onGitHubRepositoryReleaseSelected: (String) -&gt; Unit = {}, onDeleteGitHubRepository: (GitHubRepository) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:GitHubRepositoryItem.kt$@Preview(name = "Repository Item Preview") @Composable fun GitHubRepositoryItem()</ID>
    <ID>FunctionNaming:LoginScreen.kt$@Composable fun LoginScreen( modifier: Modifier = Modifier, signInEnabled: Boolean = false, onLoginRequested: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:LoginScreen.kt$@Composable fun LoginScreen( systemUiController: SystemUiController, viewModel: LoginViewModel, onNavigateToMain: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoginScreen.kt$@Preview(name = "Login Screen") @Composable fun LoginScreenPreview()</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable fun BottomBar( defaultSortOrder: SortOrder, onApplySortOrder: (SortOrder) -&gt; Unit, onRefresh: () -&gt; Unit, onShowSettings: () -&gt; Unit, onAddGitHubRepository: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable fun MainScreen( modifier: Modifier = Modifier, snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, gitHubRepositories: LazyPagingItems&lt;GitHubRepository&gt;? = null, defaultSortOrder: SortOrder = SortOrder.Asc.RepositoryOwner, isLoading: Boolean = false, onAddGitHubRepository: () -&gt; Unit = {}, onApplySortOrder: (SortOrder) -&gt; Unit = {}, onShowSettings: () -&gt; Unit = {}, onUserAvatarSelected: (String) -&gt; Unit = {}, onReleaseSelected: (String) -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onDelete: (GitHubRepository) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable fun MainScreen( systemUiController: SystemUiController, mainViewModel: MainViewModel, addRepositoryViewModel: AddRepositoryViewModel, onNavigateToSettings: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable fun Refresh( modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, onRefresh: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable fun Spinner( modifier: Modifier = Modifier, progressModifier: Modifier = Modifier.padding(all = 16.dp), alignment: Alignment = Alignment.Center )</ID>
    <ID>FunctionNaming:MainScreen.kt$@Preview(name = "Main Screen") @Composable fun MainScreenPreview()</ID>
    <ID>FunctionNaming:MonitorIntervalDialog.kt$@Composable fun MonitorIntervalDialog( defaultMonitorInterval: String, onDismiss: () -&gt; Unit, onConfirm: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:NavGraph.kt$@Composable fun NavGraph( systemUiController: SystemUiController, navController: NavHostController, startDestination: String = NavDestinations.ROUTE_LOGIN )</ID>
    <ID>FunctionNaming:SettingsAccountItem.kt$@Composable fun SettingsAccountItem( modifier: Modifier = Modifier, onUserSignOutRequested: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:SettingsManageItem.kt$@Composable fun SettingsManageItem( modifier: Modifier = Modifier, onGitHubRepositoriesImport: () -&gt; Unit = {}, onGitHubRepositoriesExport: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable fun SettingScreen( modifier: Modifier = Modifier, snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, monitorInterval: String = monitorIntervalDefaultValue, isLoading: Boolean = false, onMonitorIntervalUpdateRequested: () -&gt; Unit = {}, onGitHubRepositoriesImport: () -&gt; Unit = {}, onGitHubRepositoriesExport: () -&gt; Unit = {}, onUserSignOutRequested: () -&gt; Unit = {}, onNavigateUp: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable fun SettingsScreen( systemUiController: SystemUiController, viewModel: SettingsViewModel, onNavigateToLogin: () -&gt; Unit, onNavigateUp: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Preview(name = "Settings Screen") @Composable fun SettingsScreen()</ID>
    <ID>FunctionNaming:SettingsServiceItem.kt$@Composable fun SettingsServiceItem( monitorInterval: String, modifier: Modifier = Modifier, onMonitorIntervalUpdateRequested: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:SignOutDialog.kt$@Composable fun SignOutDialog( onDismiss: () -&gt; Unit, onConfirm: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SortOrderDialog.kt$@Composable fun SortOrderDialog( defaultSortOrder: SortOrder, onDismiss: () -&gt; Unit, onConfirm: (SortOrder) -&gt; Unit )</ID>
    <ID>LongMethod:AddGitHubRepositoryDialog.kt$@Composable fun AddGitHubRepositoryDialog( viewModel: AddRepositoryViewModel, onDismiss: () -&gt; Unit, onConfirm: (repositoryOwner: String, repositoryName: String) -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:GitHubRepositoryItem.kt$@Composable fun GitHubRepositoryItem( modifier: Modifier = Modifier, swipeableState: SwipeableState&lt;Float&gt; = rememberSwipeableState(initialValue = 0f), gitHubRepository: GitHubRepository = GitHubRepository(), onGitHubUserAvatarSelected: (String) -&gt; Unit = {}, onGitHubRepositoryReleaseSelected: (String) -&gt; Unit = {}, onDeleteGitHubRepository: (GitHubRepository) -&gt; Unit = {} )</ID>
    <ID>LongMethod:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$suspend fun getGitHubRepositoriesOrNull( gitHubRepositories: List&lt;GitHubRepository&gt;, accessToken: String ): List&lt;GitHubRepository&gt;?</ID>
    <ID>LongMethod:LoginScreen.kt$@Composable fun LoginScreen( modifier: Modifier = Modifier, signInEnabled: Boolean = false, onLoginRequested: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun MainScreen( modifier: Modifier = Modifier, snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, gitHubRepositories: LazyPagingItems&lt;GitHubRepository&gt;? = null, defaultSortOrder: SortOrder = SortOrder.Asc.RepositoryOwner, isLoading: Boolean = false, onAddGitHubRepository: () -&gt; Unit = {}, onApplySortOrder: (SortOrder) -&gt; Unit = {}, onShowSettings: () -&gt; Unit = {}, onUserAvatarSelected: (String) -&gt; Unit = {}, onReleaseSelected: (String) -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onDelete: (GitHubRepository) -&gt; Unit = {} )</ID>
    <ID>LongMethod:MainScreen.kt$@Composable fun MainScreen( systemUiController: SystemUiController, mainViewModel: MainViewModel, addRepositoryViewModel: AddRepositoryViewModel, onNavigateToSettings: () -&gt; Unit )</ID>
    <ID>LongMethod:NavGraph.kt$@Composable fun NavGraph( systemUiController: SystemUiController, navController: NavHostController, startDestination: String = NavDestinations.ROUTE_LOGIN )</ID>
    <ID>LongMethod:SettingsManageItem.kt$@Composable fun SettingsManageItem( modifier: Modifier = Modifier, onGitHubRepositoriesImport: () -&gt; Unit = {}, onGitHubRepositoriesExport: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:SettingsScreen.kt$@Composable fun SettingsScreen( systemUiController: SystemUiController, viewModel: SettingsViewModel, onNavigateToLogin: () -&gt; Unit, onNavigateUp: () -&gt; Unit )</ID>
    <ID>LongMethod:SortOrderDialog.kt$@Composable fun SortOrderDialog( defaultSortOrder: SortOrder, onDismiss: () -&gt; Unit, onConfirm: (SortOrder) -&gt; Unit )</ID>
    <ID>LongParameterList:AddGitHubRepositoryDialog.kt$( helperText: String, errorText: String, modifier: Modifier = Modifier, textColor: Color = MaterialTheme.colorScheme.onSurfaceVariant, errorTextColor: Color = MaterialTheme.colorScheme.error, isError: Boolean = false, charCnt: Int = 0, maxCharCnt: Int = Integer.MAX_VALUE )</ID>
    <ID>LongParameterList:GitHubRepositoryItem.kt$( modifier: Modifier = Modifier, swipeableState: SwipeableState&lt;Float&gt; = rememberSwipeableState(initialValue = 0f), gitHubRepository: GitHubRepository = GitHubRepository(), onGitHubUserAvatarSelected: (String) -&gt; Unit = {}, onGitHubRepositoryReleaseSelected: (String) -&gt; Unit = {}, onDeleteGitHubRepository: (GitHubRepository) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:MainScreen.kt$( defaultSortOrder: SortOrder, onApplySortOrder: (SortOrder) -&gt; Unit, onRefresh: () -&gt; Unit, onShowSettings: () -&gt; Unit, onAddGitHubRepository: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:MainScreen.kt$( modifier: Modifier = Modifier, snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, gitHubRepositories: LazyPagingItems&lt;GitHubRepository&gt;? = null, defaultSortOrder: SortOrder = SortOrder.Asc.RepositoryOwner, isLoading: Boolean = false, onAddGitHubRepository: () -&gt; Unit = {}, onApplySortOrder: (SortOrder) -&gt; Unit = {}, onShowSettings: () -&gt; Unit = {}, onUserAvatarSelected: (String) -&gt; Unit = {}, onReleaseSelected: (String) -&gt; Unit = {}, onRefresh: () -&gt; Unit = {}, onDelete: (GitHubRepository) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( modifier: Modifier = Modifier, snackBarHostState: SnackbarHostState = remember { SnackbarHostState() }, monitorInterval: String = monitorIntervalDefaultValue, isLoading: Boolean = false, onMonitorIntervalUpdateRequested: () -&gt; Unit = {}, onGitHubRepositoriesImport: () -&gt; Unit = {}, onGitHubRepositoriesExport: () -&gt; Unit = {}, onUserSignOutRequested: () -&gt; Unit = {}, onNavigateUp: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:SettingsViewModel.kt$SettingsViewModel$( savedStateHandle: SavedStateHandle, private val gitHubAuthenticationRepository: GitHubAuthenticationRepository, private val gitHubReleaseMonitorRepository: GitHubReleaseMonitorRepository, private val gitHubRepositoryJsonRepository: GitHubRepositoryJsonRepository, private val gitHubRepositoryRepository: GitHubRepositoryRepository, private val settingsRepository: SettingsRepository, private val userRepository: UserRepository )</ID>
    <ID>MagicNumber:GitHubRepositoryItem.kt$36f</ID>
    <ID>MagicNumber:RateLimit.kt$RateLimit$5000</ID>
    <ID>MagicNumber:Utils.kt$15</ID>
    <ID>MagicNumber:Utils.kt$16</ID>
    <ID>MagicNumber:Utils.kt$30</ID>
    <ID>MagicNumber:Utils.kt$4</ID>
    <ID>MagicNumber:Utils.kt$8</ID>
    <ID>SpreadOperator:GitHubRepositoryReleaseWorker.kt$GitHubRepositoryReleaseWorker$(*results.toTypedArray())</ID>
    <ID>SpreadOperator:MainViewModel.kt$MainViewModel$(*repositories.toTypedArray())</ID>
    <ID>SpreadOperator:SettingsViewModel.kt$SettingsViewModel$(*gitHubRepositories)</ID>
  </CurrentIssues>
</SmellBaseline>
