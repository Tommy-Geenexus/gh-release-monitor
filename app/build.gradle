import io.gitlab.arturbosch.detekt.Detekt

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.apollo)
    alias(libs.plugins.dagger.hilt.android)
    alias(libs.plugins.detekt)
    alias(libs.plugins.google.services)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kotlinter)
    alias(libs.plugins.spotless)
    alias(libs.plugins.versions)
    alias(libs.plugins.wire)
}

android {
    namespace "com.tomg.githubreleasemonitor"

    compileSdkVersion 33

    defaultConfig {
        applicationId "com.tomg.githubreleasemonitor"
        minSdkVersion 31
        targetSdkVersion 33
        versionCode 7
        versionName "1.1.3"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.4.0"
    }
}

tasks.named("dependencyUpdates").configure {
    def isNonStable = { String version ->
        def stableKeyword = ["RELEASE", "FINAL", "GA"].any { keyword ->
            version.toUpperCase().contains(keyword)
        }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

tasks.withType(Detekt).configureEach {
    jvmTarget = "1.8"
}

apollo {
    service("service") {
        packageNamesFromFilePaths()
    }
}

detekt {
    baseline = file("$projectDir/config/baseline.xml")
}

kotlinter {
    disabledRules = ["import-ordering"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += [
                "-opt-in=androidx.compose.animation.ExperimentalAnimationApi",
                "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                "-opt-in=coil.annotation.ExperimentalCoilApi",
                "-opt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=org.orbitmvi.orbit.annotation.OrbitExperimental"
        ]
    }
}

spotless {
    kotlin {
        ratchetFrom("origin/main")
        target("**/*.kt")
        ktlint("0.47.1")
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile rootProject.file("spotless/copyright.txt")
    }
}

wire {
    kotlin {
        android = true
    }
    sourcePath {
        srcDir "src/main/proto"
    }
}

dependencies {
    api libs.wire.runtime
    debugImplementation libs.leakcanary
    implementation platform(libs.compose.bom)
    implementation libs.bundles.implementation
    kapt libs.bundles.kapt
    runtimeOnly libs.kotlin.reflect
}
